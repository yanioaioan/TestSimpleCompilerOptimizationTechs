        -:    0:Source:main.cpp
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <iostream>
        -:    2:#include <chrono>
        -:    3:
        -:    4:
        -:    5:
        -:    6:using namespace std;
        -:    7:
        -:    8:
     2000:    9:void printSmthSlow(int t)
        -:   10:{
     2000:   11:    std::cout<<"condition met"<<t<<std::endl;
     2000:   12:}
        -:   13:
        -:   14:
      100:   15:void printSmthFast(int t)
        -:   16:{
      100:   17:        printSmthSlow(t);
      100:   18:        printSmthSlow(t+1);
      100:   19:        printSmthSlow(t+2);
      100:   20:        printSmthSlow(t+3);
      100:   21:        printSmthSlow(t+4);
      100:   22:        printSmthSlow(t+5);
      100:   23:        printSmthSlow(t+6);
      100:   24:        printSmthSlow(t+7);
      100:   25:        printSmthSlow(t+8);
      100:   26:        printSmthSlow(t+9);
        -:   27:
      100:   28:}
        -:   29:
        -:   30:
        1:   31:int main()
        -:   32:{
        -:   33:
        1:   34:    auto begin = std::chrono::high_resolution_clock::now();
        1:   35:    bool condition=1<2;
        -:   36:
        -:   37:            //slow
     1001:   38:            for (int t=0;t<1000;t+=1)
        -:   39:            {
        -:   40:                {
     1000:   41:                    printSmthSlow(t);
        -:   42:                }
        -:   43:            }
        -:   44:
        -:   45:
        -:   46:            //fast
      101:   47:            for (int t=0;t<1000;t+=10)
        -:   48:            {
        -:   49:                {
      100:   50:                    printSmthFast(t);
        -:   51:                }
        -:   52:            }
        -:   53:
        1:   54:    auto end = std::chrono::high_resolution_clock::now();
        1:   55:    int result=std::chrono::duration_cast<std::chrono::nanoseconds>(end-begin).count();
        -:   56:
        1:   57:    std::cout << "result: " << result << " ns" << std::endl;
        -:   58:
        -:   59:
        -:   60:
        1:   61:    return 0;
        3:   62:}
